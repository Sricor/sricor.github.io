<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Paper</title><link>/posts/</link><description>Recent content in Posts on Paper</description><generator>Hugo 0.125.0</generator><language>zh-cn</language><lastBuildDate>Mon, 01 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Ethereum Account</title><link>/posts/public/crypto/ethereum-account/</link><pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><guid>/posts/public/crypto/ethereum-account/</guid><description>Ethereum Account ACCOUNT TYPES Externally-owned account (EOA) – controlled by anyone with the private keys Contract account – a smart contract deployed to the network, controlled by code. Both account types have the ability to:
Receive, hold and send ETH and tokens Interact with deployed smart contracts Key differences Externally-owned
Creating an account costs nothing Can initiate transactions Transactions between externally-owned accounts can only be ETH/token transfers Made up of a cryptographic pair of keys: public and private keys that control account activities Contract</description></item><item><title>Crypto Consensus</title><link>/posts/public/crypto/crypto-consensus-decision-making/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>/posts/public/crypto/crypto-consensus-decision-making/</guid><description>1. 共识机制类型 1.1 工作量证明（Proof-of-Work, PoW） 工作量证明 （Proof-of-Work, PoW）是最传统的区块链共识机制，以工作成果来证明完成的工作量。在区块链中矿工们需透过大量的电脑运算、时间及电力解开数学难题借此产生新的区块获得相对应的报酬，因此 PoW 挖矿方式也可被称为「算力挖矿」，在区块链采用 PoW 的共识机制中，比特币（Bitcoin, BTC）是其中最具有代表性的。
1.2 权益证明 （Proof-of-Stake, PoS） 权益证明 （Proof-of-Stake, PoS）亦可称为持有量证明，在此共识机制中参与挖矿的人需要将加密货币抵押在智能合约中，币龄（币龄=持币数量*持有时间）越大代表着权益越大，而权益越大的人（节点）拥有越大机会负责产生新区块，也就是说能够预期是由谁产生下一个区块，在此共识机制中的挖矿行为又可称为「持币挖矿」，目前以太坊预计于 2023 年完成以太坊 2.0 的升级，升级完成将全面采用 PoS 进行运作。
1.3 代理权益证明（Delegated Proof-of-Stake, DPoS） 持币者进行投票（Voting）选出一定数量的见证人（Witnesses）和票选代表人（Delegates），由见证人负责进行交易验证、记帐和产生新的区块，任务完成后即可获得相对应的报酬，因此见证人也可被称为节点或是理解为矿工，而 DPoS 的挖矿亦可被称为「投票挖矿」；而票选代表人主要负责监督区块链中的协定和效能，不参与验证和产生新的区块。投票过程在 DPoS 是持续存在的过程因此当见证人执行工作效率不好或是用户提出更诱人的平台分润机制票选代表人就有可能被替换， DPoS 可以说是以民主方式治理区块链，目前采用 DPoS 的有柚子币（EOS），该平台设立有 21 位见证人。
2. Pow、Pos 及 DPoS 分析比较 共识机制 工作量证明（PoW） 权益证明（PoS） 代理权益证明（DPoS） 挖矿简介 算力挖矿，越快解出数学题的矿工产生出新的交易区块并获得相对应的报酬 持币挖矿，拥有币龄越高的使用者越有机会产生新的区块并获得报酬 投票挖矿，由持有加密货币的使用者进行投票产生见证人，由见证人负责验证交易和产生新的区块 能源消耗 极高 低 低 硬件设备 需要 不需要 不需要 优点 1. 去中心化程度高，任何人都可以自由进出节点 2. 安全性高，破坏系统需要消耗大量成本 1. 挖矿不需要建造昂贵的设备 2. 降低 51% 算力攻击几率 1.</description></item><item><title>Crypto Decentralized Finance</title><link>/posts/public/crypto/crypto-decentralized-finance/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>/posts/public/crypto/crypto-decentralized-finance/</guid><description>以下信息整理至 2023/12/20
1. DeFi 概念 去中心化金融（Decentralized Finance, DeFi），泛指基于区块链技术架构下在智能合约平台上所衍生的加密货币及其相关的金融交易，包含借贷、保险、期货及投资理财等。
自加密货币问世以来对于科技界及传统金融产业界掀起爆发性的革命，随着时间的演进去中心化金融的发展也日新月异，与 DeFi 相左的即为传统的「中心化金融」，传统的金融交易都需要透过「中介者（Intermediate）」来完成，使用者透过与中介者建立信任关系与熟识者或素未谋面的人完成交易，而中介者可以泛指银行、证券交易所、信用卡机构等，然而中心化金融架构下有几个显著缺点一直为人所诟病，包含有：高额且多重的交易手续费、交易时间和地点限制、低效率的结算服务、中介者甚至拥有否决交易的权力等。
而 DeFi 顾名思义就是在所有的金融交易过程中去除「中介者」的角色，所有的交易依赖智能合约所载明的执行条件来判断交易成立与否，区块链的核心为透明化及分散性因此也可将 DeFi 称为「分散式金融」或者「开放金融」。而网络的世界无远佛届且交易无时无刻在执行使得 DeFi 具备有无地域、无时间限制且交易更为透明化，更因为交易成立与否全依赖智能合约判断直接且快速地达成普惠金融的概念，翻转理财致富只属于富者的偏见，目前 DeFi 在借贷、交易、衍生品、稳定币、保险等方面都有成熟的项目。
2. 交易所 大部分的投资人在 DeFi 的交易都会透过交易所来进行，交易所提供许多金融商品交易服务给投资人做选择在 DeFi 中交易所提供的服务包含有：加密货币兑换（购买）、现货交易、期货交易、保险等。目前在 DeFi 中有「中心化交易所（Centralized Exchange，简称：CEX）」和「去中心化交易所（Decentralized Exchange，简称 DEX）」两种。下列简单说明两者的特点：
中心化交易所（CEX）：和传统金融交易所相似，用户需开立帐户进行注册并进行实名认证（Know Your Customer, KYC）待身份认证完成后才可开启金融活动，交易所主要代为托管用户资产，但用户没有私钥和资产的实际控制权，目前 CEX 还是 DeFi 交易的主流， CEX 大多具有方便使用的特性，许多初阶 DeFi 投资者会选择 CEX 开始活动，选用CEX 还有一个隐藏的保险机制，用户讯息由交易所托管因此在忘记密码时，可以向交易所取得密码，避免因一时疏忽而导致资产减损。 去中心化交易所（DEX）：以区块链为概念进行设计并以智能合约自动化履行交易，允许跨钱包及跨链交易，不会将用户的资料储存在伺服器上。 3. 加密货币钱包（Cryptocurrency Wallet） 目前 DeFi 中所使用的加密货币钱包可区分为两种型态分别是热钱包（Hot wallet）及冷钱包（Cold Wallet）：
热钱包 （Hot wallet）：主动连接至网络的加密货币钱包，加密货币及钱包都托管在交易所或专门的托管商手中，因此私钥有外流的可能性，也因为与网络连接若遭遇骇客攻击可能就会产生损失，但热钱包容易上手适合初学者或是没有巨额加密货币资产配置的人使用，一般常见的热钱包包含有交易所钱包、桌面式钱包、行动式钱包。 冷钱包 （Cold wallet）：没有与网络有直接的连接，私钥由钱包所有人保管，若使用得当遭受骇客攻击和窃取的可能性相当低，因此安全性较热钱包来的高适合有高额加密货币配置的投资人用来保管资产，私钥由钱包所有人全权管辖若不慎遗失私钥，则所有的加密货币资产也随之不翼而飞，目前常见的冷钱包有两种，分别是硬体钱包和纸钱包。 4. DeFi 投资理财类型 参与 DeFi 的投资活动最简单的方式就是购买加密货币，并将加密货币视为「股票」等待价值提升。
4.1 稳定币投资 稳定币（Stablecoin）为加密货币的一种，仿效法定货币的发行藉由与某种稳定资产挂钩，使其价值维持在一定范围内，可以说是法币与加密货币的综合体，保有了两方的特性，与加密货币相比普遍来说稳定币的波动较一般加密货币来的低。根据抵押的资产可分为四个类别：</description></item><item><title>Rust Fearless Concurrency</title><link>/posts/public/rust/fearless-concurrency/</link><pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate><guid>/posts/public/rust/fearless-concurrency/</guid><description>Call the std::thread::spawn function and pass it a closure to Create a new thread. All spawned threads are shut down, when the main thread completes. Call the join method on it, will wait for its thread to finish. std::mpsc::channel function returns a tuple, the first element of which is the transmitter and the second element is the receiver. Transmitter send method takes ownership of its parameter. Receiver recv method will block the main thread’s execution and wait until a value is sent down the channel.</description></item><item><title>Rust Smart Pointers</title><link>/posts/public/rust/smart-pointers/</link><pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate><guid>/posts/public/rust/smart-pointers/</guid><description>Box&amp;lt;T&amp;gt; have single owners Box&amp;lt;T&amp;gt; allow to store data on the heap. Box&amp;lt;T&amp;gt; is a pointer, point to data on the heap. When a box goes out of scope, it will be deallocated (both for the heap and stack). Implementing the Deref trait allows to customize the behavior of the dereference operator *. Implementing the Drop trait, Rust automatically called drop when instances went out of scope. Not allowed to explicitly call drop.</description></item><item><title>Rust Ownership - Reference and Borrowing</title><link>/posts/public/rust/ownership-reference-borrowing/</link><pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate><guid>/posts/public/rust/ownership-reference-borrowing/</guid><description>引用与借用 引用允许使用值但不获取其所有权 the ownership system that makes sure references are always valid 引用的作用域是从声明的地方开始一直持续到最后一次使用为止 引用默认不允许修改引用的值，可使用 mut 关键字使其为可变引用 在任意给定时间，要么只能有一个可变引用，要么只能有多个不可变引用 引用 引用（reference）是一个地址，我们可以由此访问储存于该地址的属于其变量的数据，创建一个引用的行为称为借用（borrowing）。
fn main() { let s1 = String::from(&amp;#34;hello&amp;#34;); let len = calculate_length(&amp;amp;s1); println!(&amp;#34;The length of &amp;#39;{}&amp;#39; is {}.&amp;#34;, s1, len); } fn calculate_length(s: &amp;amp;String) -&amp;gt; usize { // s 是 String 的引用 s.len() } // 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，所以什么也不会发生 calculate_length 函数以一个对象的引用作为参数而不是获取值的所有权。 &amp;amp;s1 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它，所以当引用停止使用时，它所指向的值也不会被丢弃。
可变引用 可变引用允许修改一个借用的值。
fn main() { let mut s = String::from(&amp;#34;hello&amp;#34;); change(&amp;amp;mut s); } fn change(some_string: &amp;amp;mut String) { some_string.</description></item><item><title>Rust Ownership - Scope</title><link>/posts/public/rust/ownership-scope/</link><pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate><guid>/posts/public/rust/ownership-scope/</guid><description>变量的作用域 作用域是一个项在程序中有效的范围。
{ // s 在这里无效，它尚未声明 let s = &amp;#34;hello&amp;#34;; // 从此处起，s 是有效的 ... } // 此作用域已结束，s 不再有效 变量 s 绑定到了一个字符串字面值，这个字符串值是硬编码进程序代码中的。
这里有两个重要的时间点：
当 s 进入作用域 时，它就是有效的。 这一直持续到它 离开作用域 为止。 引用的作用域 引用的作用域是从声明的地方开始一直持续到最后一次使用为止</description></item><item><title>Rust Ownership</title><link>/posts/public/rust/ownership/</link><pubDate>Sat, 09 Dec 2023 00:00:00 +0000</pubDate><guid>/posts/public/rust/ownership/</guid><description>所有权 每一个值都有一个所有者 At any given time, you can have either (but not both) one mutable reference or any number of immutable references. References must always be valid. 将值赋给另一个变量（包含函数实参）时移动它 当持有堆中数据值的变量离开作用域时，其值将通过 drop 被清理掉，除非数据被移动为另一个变量所有 所有权与函数 fn main() { let s = String::from(&amp;#34;hello&amp;#34;); // s 进入作用域 takes_ownership(s); // s 的值移动到函数里 ... // ... 所以到这里不再有效 let x = 5; // x 进入作用域 makes_copy(x); // x 应该移动函数里， // 但 i32 是 Copy 的， // 所以在后面可继续使用 x } // 这里，x 先移出了作用域，然后是 s。但因为 s 的值已被移走，所以不会发生改变 fn takes_ownership(some_string: String) { // some_string 进入作用域 println!</description></item><item><title>Bitcoin</title><link>/posts/public/crypto/crypto-bitcoin/</link><pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate><guid>/posts/public/crypto/crypto-bitcoin/</guid><description>Bitcoin</description></item><item><title>Markdown Syntax Guide</title><link>/posts/public/temp/markdown-syntax/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/public/temp/markdown-syntax/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p></description></item><item><title>Rich Content</title><link>/posts/public/temp/rich-content/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/public/temp/rich-content/</guid><description>&lt;p>Hugo ships with several &lt;a href="https://gohugo.io/content-management/shortcodes/#use-hugos-built-in-shortcodes">Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a href="https://gohugo.io/about/hugo-and-gdpr/">Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p>
&lt;h2 id="heading">&lt;/h2></description></item><item><title>Math Typesetting</title><link>/posts/public/temp/math-typesetting/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>/posts/public/temp/math-typesetting/</guid><description>&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p></description></item><item><title/><link>/posts/public/rust/fn-fnmut-and-fnonce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/posts/public/rust/fn-fnmut-and-fnonce/</guid><description>The traits each represent more and more restrictive properties about closures/functions, indicated by the signatures of their call_... method, and particularly the type of self:
FnOnce (self) are functions that can be called once FnMut (&amp;amp;mut self) are functions that can be called if they have &amp;amp;mut access to their environment Fn (&amp;amp;self) are functions that can be called if they only have &amp;amp; access to their environment A closure |.</description></item></channel></rss>